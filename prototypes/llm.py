
from typing import Any, Dict, Optional

from langchain.agents.agent import AgentExecutor
from langchain.agents.mrkl.base import ZeroShotAgent
from langchain.base_language import BaseLanguageModel
from langchain.callbacks.base import BaseCallbackManager
from langchain.chains.llm import LLMChain
from langchain.tools.python.tool import PythonREPLTool
from langchain.llms.openai import OpenAI
from langchain.agents.agent_types import AgentType
from getpass import getpass
from langchain.agents.agent_toolkits import create_python_agent


def create_python_agent(
    llm: BaseLanguageModel,
    tool: PythonREPLTool,
    prefix: str,
    suffix: str,
    format_instructions: str,
    callback_manager: Optional[BaseCallbackManager] = None,
    verbose: bool = False,
    agent_executor_kwargs: Optional[Dict[str, Any]] = None,
    **kwargs: Dict[str, Any],
) -> AgentExecutor:
    """Construct a python agent from an LLM and tool."""
    tools = [tool]
    prompt = ZeroShotAgent.create_prompt(tools, prefix=prefix, suffix=suffix, format_instructions=format_instructions)
    llm_chain = LLMChain(
        llm=llm,
        prompt=prompt,
        callback_manager=callback_manager,
    )
    tool_names = [tool.name for tool in tools]
    agent = ZeroShotAgent(llm_chain=llm_chain, allowed_tools=tool_names, **kwargs)
    return AgentExecutor.from_agent_and_tools(
        agent=agent,
        tools=tools,
        callback_manager=callback_manager,
        verbose=verbose,
        **(agent_executor_kwargs or {}),
    )

prefix = '''You are an agent designed to write and execute python code to answer questions.
You have access to a python REPL, which you can use to execute python code.
If you get an error, debug your code and try again.
Only use the output of your code to answer the question.
You might know the answer without running any code, but you should still run the code to get the answer.
If it does not seem like you can write code to answer the question, just return "I don't know" as the answer.
Ouput of your code will be used to answer the question.

You will start with the following code:
``` python
import streamlit as st
import pandas as pd

def dynamic(uploaded_file: pd.DataFrame):
    """
    this function will be replaced by the code generated by the LLM after the prompt of the user
    uploaded_file: is a panda dataframe pd.DataFrame
    """
    st.write("This content will be replaced")
```
'''

format_instructions = """Use the following format:

Question: the input question you must answer
Thought: you should always think about what to do
Action: the action to take, should be one of [{tool_names}]
Action Input: the input to the action
Observation: the result of the action
... (this Thought/Action/Action Input/Observation can repeat N times)
Thought: I now know the final answer
Final Answer: the final answer to the original input question"""

suffix = """Begin!

Question: {input}
Thought:{agent_scratchpad}"""

def setup_llm_chain(openai_api_key):
    agent_executor = create_python_agent(
        llm=OpenAI(temperature=0, max_tokens=1000, openai_api_key=openai_api_key),
        tool=PythonREPLTool(),
        verbose=True,
        prefix=prefix,
        agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    )
    return agent_executor


